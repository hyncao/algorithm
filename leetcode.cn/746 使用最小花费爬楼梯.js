// 746. 使用最小花费爬楼梯

// 给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。

// 你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。

// 请你计算并返回达到楼梯顶部的最低花费。

// 输入：cost = [10,15,20]
// 输出：15
// 解释：你将从下标为 1 的台阶开始。
// - 支付 15 ，向上爬两个台阶，到达楼梯顶部。
// 总花费为 15 。

// 输入：cost = [1,100,1,1,1,100,1,1,100,1]
// 输出：6
// 解释：你将从下标为 0 的台阶开始。
// - 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。
// - 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。
// - 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。
// - 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。
// - 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。
// - 支付 1 ，向上爬一个台阶，到达楼梯顶部。
// 总花费为 6 。

// 思考：
// 看这一组数据：[300,1,100,1,100,1,100,200,300]
// 如果每次拿上面两个台阶比较花费，拿到的结果是：1+1+1+100+200
// 所以每次应该拿三个样本对比，min(middle, left+right)
// 思路错了，要换个思路

// 动态规划吧哥，好好练练
// dp[i]为达到第 i 个台阶的费用
// 来看看状态转移方程：
// dp[i] = min(dp[i-1] + cost[i-1], dp[i-2] + cost[i-2])
// “可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯” 翻译为代码：
// dp[0] = dp[1] = 0;

// 总结：动态规划好牛逼，比递归牛逼

// 执行用时：
// 56 ms, 在所有 JavaScript 提交中击败了 95.32% 的用户
// 内存消耗：
// 43.1 MB, 在所有 JavaScript 提交中击败了 38.17% 的用户
const minCostClimbingStairs1 = cost => {
  const dp = [0, 0];
  for (let i = 2; i <= cost.length; i++) {
    dp[i] = Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);
  }
  return dp[cost.length];
};

// 进一步优化，空间复杂度降低为O(1)
// 执行用时：
// 64 ms, 在所有 JavaScript 提交中击败了 69.02% 的用户
// 内存消耗：
// 41.3 MB, 在所有 JavaScript 提交中击败了 97.21% 的用户
const minCostClimbingStairs2 = cost => {
  let n0 = 0;
  let n1 = 0;
  for (let i = 2; i <= cost.length; i++) {
    const temp = n1;
    n1 = Math.min(n1 + cost[i - 1], n0 + cost[i - 2]);
    n0 = temp;
  }
  return n1;
};

const cost = [
  437, 619, 493, 370, 224, 320, 159, 603, 792, 596, 817, 12, 8, 608, 51, 828, 895, 510, 28, 49, 465, 613, 587, 342, 635,
  741, 357, 147, 361, 632, 491, 359, 483, 976, 79, 285, 945, 365, 335, 89, 74, 83, 122, 833, 336, 272, 90, 956, 532, 77,
];

console.log(minCostClimbingStairs2(cost));
