// 999. 可以被一步捕获的棋子数

// 在一个 8 x 8 的棋盘上，有一个白色的车（Rook），用字符 'R' 表示。棋盘上还可能存在空方块，白色的象（Bishop）以及黑色的卒（pawn），

// 分别用字符 '.'，'B' 和 'p' 表示。不难看出，大写字符表示的是白棋，小写字符表示的是黑棋。

// 车按国际象棋中的规则移动。东，西，南，北四个基本方向任选其一，然后一直向选定的方向移动，直到满足下列四个条件之一：

// 棋手选择主动停下来。
// 棋子因到达棋盘的边缘而停下。
// 棋子移动到某一方格来捕获位于该方格上敌方（黑色）的卒，停在该方格内。
// 车不能进入/越过已经放有其他友方棋子（白色的象）的方格，停在友方棋子前。
// 你现在可以控制车移动一次，请你统计有多少敌方的卒处于你的捕获范围内（即，可以被一步捕获的棋子数）。

// 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
// 输出：3
// 解释：
// 在本例中，车能够捕获所有的卒。

// 输入：[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
// 输出：0
// 解释：
// 象阻止了车捕获任何卒。

// 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
// 输出：3
// 解释：
// 车可以捕获位置 b5，d6 和 f5 的卒。

// O(m*n) O(1)
// 执行用时：
// 56 ms, 在所有 JavaScript 提交中击败了 75.00% 的用户
// 内存消耗：
// 40.8 MB, 在所有 JavaScript 提交中击败了 75.00% 的用户
const numRookCaptures = board => {
  let res = 0;
  for (let y = 0; y < 8; y++) {
    for (let x = 0; x < 8; x++) {
      if (board[y][x] === 'R') {
        for (let _x = x; _x < 8; _x++) {
          if (board[y][_x] === 'B') break;
          if (board[y][_x] === 'p') {
            res++;
            break;
          }
        }
        for (let _x = x; _x >= 0; _x--) {
          if (board[y][_x] === 'B') break;
          if (board[y][_x] === 'p') {
            res++;
            break;
          }
        }
        for (let _y = y; _y < 8; _y++) {
          if (board[_y][x] === 'B') break;
          if (board[_y][x] === 'p') {
            res++;
            break;
          }
        }
        for (let _y = y; _y >= 0; _y--) {
          if (board[_y][x] === 'B') break;
          if (board[_y][x] === 'p') {
            res++;
            break;
          }
        }
        return res;
      }
    }
  }
};

const board = [
  ['.', '.', '.', '.', '.', '.', '.', '.'],
  ['.', '.', '.', 'p', '.', '.', '.', '.'],
  ['.', '.', '.', 'p', '.', '.', '.', '.'],
  ['p', 'p', '.', 'R', '.', 'p', 'B', '.'],
  ['.', '.', '.', '.', '.', '.', '.', '.'],
  ['.', '.', '.', 'B', '.', '.', '.', '.'],
  ['.', '.', '.', 'p', '.', '.', '.', '.'],
  ['.', '.', '.', '.', '.', '.', '.', '.'],
];

console.log(numRookCaptures(board));
