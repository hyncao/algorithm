// 26. 删除有序数组中的重复项

// 给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。

// 由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。

// 将最终结果插入 nums 的前 k 个位置后返回 k 。

// 不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

// 输入: nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4];
// 输出: [(0, 1, 2, 3, 4)];

// 题目描述逼逼赖赖的说不明白, 总结一下, 需要将传入的数组进行修改, 同时将去重后数组的长度返回
// 输入: nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4];
// 将 nums 改为 [0, 1, 2, 3, 4, 2, 2, 3, 3, 4];
// 并且 return 5

// 双指针 O(2n)
// 执行用时：
// 72 ms, 在所有 JavaScript 提交中击败了 62.19% 的用户
// 内存消耗：
// 43.7 MB, 在所有 JavaScript 提交中击败了 77.05% 的用户
const removeDuplicates = nums => {
  let start = 0;
  let end = 0;

  while (end < nums.length) {
    if (nums[start] !== nums[end]) {
      start++;
      nums[start] = nums[end];
    }
    end++;
  }

  return start + 1;
};

const nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4];

console.log(removeDuplicates(nums));
